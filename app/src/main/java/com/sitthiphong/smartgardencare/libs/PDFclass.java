package com.sitthiphong.smartgardencare.libs;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Environment;
import android.util.Log;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.sitthiphong.smartgardencare.datamodel.LogDataBean;

import java.io.File;
import java.io.FileOutputStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Created by Suphadate_Noy on 11/23/2015.
 */
public class PDFclass {
    //private static NameWalletTB objNameWalletTB;
    //private WalletTB objWalletTB;
    private int mIdTable;
    java.util.List<LogDataBean> logList;
    //String[] textPDF;
    private Context mContext;

    public PDFclass(Context context, java.util.List<LogDataBean> logList) {
        this.mContext = context;
        this.logList = logList;
    }


    public void createPDF() {
        String tableName = "log data";
        Document doc = new Document();
        PdfWriter docWriter = null;
        DecimalFormat df = new DecimalFormat("0");
        //double inTotal = 0, exTotal = 0, saveTotal = 0, reTotal = 0;

        try {
            File pdfFolder = new File(Environment.getExternalStoragePublicDirectory(
                    Environment.DIRECTORY_DOWNLOADS), "SmartGarden");
            if (!pdfFolder.exists()) {
                pdfFolder.mkdir();
                Log.i("LOG_TAG", "Pdf Directory created");
            }
            Log.e("TAG", "path pdfFolder: " + pdfFolder.getAbsolutePath());
            //Create time stamp
            Date date = new Date();
            String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(date);
            Log.e("TAG", "timeStamp: " + timeStamp);
            File myFile = new File(pdfFolder.getAbsolutePath() + "/log Data " + timeStamp + ".pdf");
            Log.e("TAG", "path myFile: " + myFile.getAbsolutePath());
            //OutputStream output = new FileOutputStream(myFile);


            BaseFont urName = BaseFont.createFont("assets/fonts/THSarabunNew.ttf", "TIS-620", BaseFont.EMBEDDED);
            Font sarabunB18 = new Font(urName, 18, Font.BOLD);
            Font sarabunB22 = new Font(urName, 22, Font.BOLD);
            Font sarabunB = new Font(urName, 16, Font.BOLD);
            Font sarabun = new Font(urName, 16);
            Font sarabun14 = new Font(urName, 14);
            //file path
            //String path = pdfFilename;
            docWriter = PdfWriter.getInstance(doc, new FileOutputStream(myFile));

            //document header attributes
            doc.addAuthor("Smart Garden Applications");
            doc.addCreationDate();
            doc.addProducer();
            doc.addCreator("jozziga.com");
            doc.addTitle("Report log data");
            doc.setPageSize(PageSize.A4);

            //open document
            doc.open();

            //create a paragraph
            Paragraph paragraph = new Paragraph();

            paragraph.add(new Paragraph("Smart Garden", sarabunB22));
            // Will create: Report generated by: _name, _date
            paragraph.add(new Paragraph(tableName, sarabunB18));
            // Will create: Report generated by: _name, _date

            // Will create: Report generated by: _name, _date
            paragraph.add(new Paragraph(getTimeDatabase(), sarabun));
            // Will create: Report generated by: _name, _date
            //paragraph.add(new Paragraph("", sarabun));
            // Will create: Report generated by: _name, _date

            addEmptyLine(paragraph, 1);
            //specify column widths
            float[] columnWidths = {1f, 3f, 3f, 2f, 2f, 2f, 2f};
            //create PDF table with the given widths
            PdfPTable table = new PdfPTable(columnWidths);
            // set table width a percentage of the page width
            table.setWidthPercentage(90f);

            //insert column headings
            insertCell(table, "NO.", Element.ALIGN_CENTER, 1, sarabunB);
            insertCell(table, "Time", Element.ALIGN_CENTER, 1, sarabunB);
            insertCell(table, "Working", Element.ALIGN_CENTER, 1, sarabunB);
            insertCell(table, "Type", Element.ALIGN_CENTER, 1, sarabunB);
            insertCell(table, "value before", Element.ALIGN_CENTER, 1, sarabunB);
            insertCell(table, "value after", Element.ALIGN_CENTER, 1, sarabunB);
            insertCell(table, "Note", Element.ALIGN_CENTER, 1, sarabunB);
            table.setHeaderRows(1);

            //insert an empty row
//            insertCell(table, "", Element.ALIGN_LEFT, 7, sarabunB);
//            //create section heading by cell merging
//            insertCell(table, "New York Orders ...", Element.ALIGN_LEFT, 7, sarabunB);
            double totalIn = 0, totalEx = 0, totalSave = 0, totalRe = 0;

            //just some random data to fill
            for (int x = 0; x < logList.size(); x++) {

                LogDataBean bean = logList.get(x);
                //Toast.makeText(v.getContext(),getPosition(), Toast.LENGTH_LONG).show();
                String working = getAction(bean.getWorking());
                String strDate = String.valueOf(SimpleDateProvider.getInstance()
                        .format(new Date(bean.getTime() * 1000)));
//                String strTxtColor = custom.get("txtColor");
//                String strTime = custom.get("time");
//                String strPhoto = custom.get("photo");
//                String idOrder = custom.get("id_order");
//                String id = custom.get("_id");
//                String idTable = custom.get("idTable");
                //String strRemain = setCommaMoney(Double.parseDouble(custom.get("remain")));
                //totalRe = totalRe + Double.parseDouble(custom.get("remain"));
                String valBefore = String.valueOf(bean.getVal_berfore());
                //totalEx = totalEx + Double.parseDouble(custom.get("expense"));
                String Type = getTypeWorking(bean.getType());
                //totalIn = totalIn + Double.parseDouble(custom.get("income"));
                String valAfter = String.valueOf(bean.getVal_after());
                //totalSave = totalSave + Double.parseDouble(custom.get("saving"));
                insertCell(table, String.valueOf(x + 1), Element.ALIGN_CENTER, 1, sarabun14);
                insertCell(table, strDate, Element.ALIGN_CENTER, 1, sarabun14);
                insertCell(table, working, Element.ALIGN_CENTER, 1, sarabun14);
                insertCell(table, Type, Element.ALIGN_CENTER, 1, sarabun14);
                insertCell(table, valBefore, Element.ALIGN_RIGHT, 1, sarabun14);
                insertCell(table, valAfter, Element.ALIGN_RIGHT, 1, sarabun14);
                insertCell(table, getNote(bean.getWorking()), Element.ALIGN_CENTER, 1, sarabun14);

            }
//            //merge the cells to create a footer for that section
//            insertCell(table, "รวมทั้งหมด", Element.ALIGN_RIGHT, 3, sarabun14);
//            insertCell(table, setCommaMoney(totalIn), Element.ALIGN_RIGHT, 1, sarabun14);
//            insertCell(table, setCommaMoney(totalEx), Element.ALIGN_RIGHT, 1, sarabun14);
//            insertCell(table, setCommaMoney(totalSave), Element.ALIGN_RIGHT, 1, sarabun14);
//            insertCell(table, setCommaMoney(totalRe), Element.ALIGN_RIGHT, 1, sarabun14);
            //add the PDF table to the paragraph
            paragraph.add(table);
            // add the paragraph to the document
            doc.add(paragraph);


            if (myFile != null) {
                Intent target = new Intent(Intent.ACTION_VIEW);
                target.setDataAndType(Uri.fromFile(myFile), "application/pdf");
                target.setFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);

                Intent intent = Intent.createChooser(target, "Open File");
                try {
                    mContext.startActivity(intent);
                } catch (ActivityNotFoundException e) {
                    // Instruct the user to install a PDF reader here, or something
                }
            }

        } catch (DocumentException dex) {
            dex.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            if (doc != null) {
                //close the document
                doc.close();
            }
            if (docWriter != null) {
                //close the writer
                docWriter.close();
            }
        }
    }

    private String getTypeWorking(int working) {
        if (working == 1) {
            return "Auto";
        } else if (working == 2) {
            return "Manual";
        } else if (working == 3) {
            return "Alarm Clock";
        } else {
            return "auto";
        }
    }

//    private ArrayList<HashMap<String, String>> getArraylist(int idTable) {
//
//        ArrayList<HashMap<String, String>> MyArrList = new ArrayList<HashMap<String, String>>();
//        MyArrList = objWalletTB.SelectAllDatabyTable(idTable);
//        return MyArrList;
//
//    }

    private static void insertCell(PdfPTable table, String text, int align, int colspan, Font font) {

        //create a new cell with the specified Text and Font
        PdfPCell cell = new PdfPCell(new Phrase(text.trim(), font));
        //set the cell alignment
        cell.setHorizontalAlignment(align);
        //set the cell column span in case you want to merge two or more cells
        cell.setColspan(colspan);
        //in case there is no text and you wan to create an empty row
        if (text.trim().equalsIgnoreCase("")) {
            cell.setMinimumHeight(10f);
        }
        //add the call to the table
        table.addCell(cell);

    }

    private static String setCommaMoney(double value) {
        DecimalFormat myFormatter = new DecimalFormat("#,###");
        String output = myFormatter.format(value);
        return output;
    }

    public static void createList(Section subCatPart) {
        List list = new List(true, false, 10);
        list.add(new ListItem("First point"));
        list.add(new ListItem("Second point"));
        list.add(new ListItem("Third point"));
        subCatPart.add(list);
    }

    /*private String sourceDateFromDB(int position) {

        HashMap<String, String> custom = arrListAll.get(position);

        String[] newDate = custom.get("date").split("/");

        return newDate[2] + "/" + newDate[1] + "/" + newDate[0];
    }*/

    public static void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

    public String getTimeDatabase() {
        LogDataBean bean = logList.get((logList.size() - 1));
        String date = SimpleDateProvider.getInstance()
                .format(new Date(bean.getTime() * 1000)) + " - ";
        bean = logList.get(0);
        date += SimpleDateProvider.getInstance()
                .format(new Date(bean.getTime() * 1000));
        return date;
    }

    public String getAction(int action) {
        String result;
        switch (action) {
            case 1:
                result = "Water";
                break;
            case 2:
                result = "Shower";
                break;
            case 3:
                result = "Open Slat";
                break;
            case 4:
                result = "Close Slat";
                break;
            case 5:
                result = "Water";
                //arr[5] = getString(R.string.waterFalse);
                break;
            case 6:
                result = "Water";
                //arr[5] = getString(R.string.noWateringArea);
                break;
            case 7:
                result = "Shower";
                //arr[5] = getString(R.string.waterFalse);
                break;
            case 8:
                result = "Shower";
                //arr[5] = getString(R.string.tempNotDecrease);
                break;
            case 9:
                result = "Close Slat";
                //arr[5] = getString(R.string.lightInNotDecrease);
                break;
            default:
                result = "-";
        }
        return result;

    }

    public String getNote(int action) {
        String result;
        switch (action) {
            case 5:
                //result = getString(R.string.water);
                result = "Water False!";
                break;
            case 6:
                //result = getString(R.string.water);
                result = "No Watering Area";
                break;
            case 7:
                //result = getString(R.string.shower);
                result = "Water False!";
                break;
            case 8:
                //result = getString(R.string.shower);
                result = "Temp Not Decrease";
                break;
            case 9:
                //result = getString(R.string.acCloseSlat);
                result = "light in not Decrease";
                break;
            default:
                result = "-";
        }
        return result;
    }
}
